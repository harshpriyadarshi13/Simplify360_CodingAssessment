Question 1:
----------------------------------------------------------------------------------------------------------------------------------------------------
We have a large and complex workflow, made of tasks. And have to decide who does what, when, so it all gets done on time.
All tasks have dependency on other tasks to complete
Each task(t) has a
D[t] = duration of task
EFT[t] = the earliest finish time for a task
LFT[t] = the latest finish time for a task
EST[t] = the earliest start time for a task
LST[t] = the last start time for a task
Assume that “clock” starts at 0 (project starting time).
We are given the starting task T_START where the EST[t] = 0 and LST[t] = 0
You have to write an Java/Python/JS/Typescript console application to answer the following questions
Earliest time all the tasks will be completed?
Latest time all tasks will be completed?
-------------------------------------------------------------------------------------------------------------------------------------------------------

Answer :
-------------------------------------------------------------------------------------------------------------------------------------------------------
from collections import defaultdict, deque

# Function to perform topological sorting
def topological_sort(graph, in_degree):
    topo_order = []
    queue = deque([node for node in graph if in_degree[node] == 0])
    
    while queue:
        node = queue.popleft()
        topo_order.append(node)
        
        for neighbor in graph[node]:
            in_degree[neighbor] -= 1
            if in_degree[neighbor] == 0:
                queue.append(neighbor)
    
    return topo_order

# Function to calculate EST, EFT, LST, LFT
def calculate_times(tasks, durations, dependencies):
    # Initialize graph and in-degree for topological sorting
    graph = defaultdict(list)
    in_degree = {task: 0 for task in tasks}
    
    # Build the graph and calculate in-degree for each task
    for pre, post in dependencies:
        graph[pre].append(post)
        in_degree[post] += 1
    
    # Topological sorting
    topo_order = topological_sort(graph, in_degree)
    
    # Initialize EST and EFT
    EST = {task: 0 for task in tasks}
    EFT = {}
    
    # Forward pass to calculate EST and EFT
    for task in topo_order:
        EFT[task] = EST[task] + durations[task]
        for neighbor in graph[task]:
            EST[neighbor] = max(EST[neighbor], EFT[task])
    
    # Initialize LFT and LST
    LFT = {task: float('inf') for task in tasks}
    LST = {}
    
    # Set LFT of the last task to its EFT
    max_eft = max(EFT.values())
    for task in topo_order:
        if not graph[task]:  # If no outgoing edges (last tasks)
            LFT[task] = max_eft
    
    # Backward pass to calculate LFT and LST
    for task in reversed(topo_order):
        LST[task] = LFT[task] - durations[task]
        for neighbor in graph[task]:
            LFT[task] = min(LFT[task], LST[neighbor])
    
    # Earliest and latest completion times
    earliest_completion_time = max(EFT.values())
    latest_completion_time = max(LFT.values())
    
    return earliest_completion_time, latest_completion_time

# Example tasks, durations, and dependencies
tasks = ['T_START', 'A', 'B', 'C', 'D', 'E', 'F', 'G']
durations = {
    'T_START': 0, 
    'A': 3, 
    'B': 2, 
    'C': 4, 
    'D': 6, 
    'E': 1, 
    'F': 2, 
    'G': 1
}
dependencies = [
    ('T_START', 'A'), 
    ('T_START', 'B'), 
    ('A', 'C'), 
    ('B', 'C'), 
    ('C', 'D'), 
    ('C', 'E'), 
    ('D', 'F'), 
    ('E', 'F'), 
    ('F', 'G')
]

earliest_time, latest_time = calculate_times(tasks, durations, dependencies)

print(f"Earliest time all tasks will be completed: {earliest_time}")
print(f"Latest time all tasks will be completed: {latest_time}")

--------------------------------------------------------------------------------------------------------------------------------------------------------
