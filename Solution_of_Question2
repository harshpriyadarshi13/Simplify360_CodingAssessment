Question 2:
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
Both Alice & Bob have friends. Create a Java/Python/JS/Typescript console application to find all the friends of Alice 
and all the friends of Bob & common friends of Alice and Bob.
Your algorithm should be able to do the following:
Take any 2 friends and find the common friends between the 2 friends
Take any 2 friends find the nth connection - for example: connection(Alice, Janice) => 2
Alice has friend Bob and Bob has friend Janice, if the input given is Alice and Janice the output should be 2,
meaning 2nd connection, that means Janice is the second connection of Alice and Bob being the 1st connection of Alice.
Likewise if input given is Alice and Bob, the output should be 1, for 1st connection
If there is no connection at all, it should return -1
Add the console applications(programs) to your Github account and share the Github links for evaluation. 
Make sure your code is executable and free of syntax errors. Also please explain the Time and Space complexity of your respective programs as code comments
--------------------------------------------------------------------------------------------------------------------------------------------------------------------

Answer :
--------------------------------------------------------------------------------------------------------------------------------------------------------------------

from collections import defaultdict, deque

class SocialNetwork:
    def __init__(self):
        self.friends = defaultdict(set)
    
    def add_friendship(self, person1, person2):
        self.friends[person1].add(person2)
        self.friends[person2].add(person1)
    
    def get_friends(self, person):
        return self.friends[person]
    
    def common_friends(self, person1, person2):
        return self.friends[person1].intersection(self.friends[person2])
    
    def nth_connection(self, person1, person2):
        if person1 == person2:
            return 0
        
        queue = deque([(person1, 0)])
        visited = set([person1])
        
        while queue:
            current, level = queue.popleft()
            for friend in self.friends[current]:
                if friend == person2:
                    return level + 1
                if friend not in visited:
                    visited.add(friend)
                    queue.append((friend, level + 1))
        
        return -1

# Example Usage:
if __name__ == "__main__":
    network = SocialNetwork()
    
    # Adding friendships
    network.add_friendship('Alice', 'Bob')
    network.add_friendship('Bob', 'Janice')
    network.add_friendship('Alice', 'Charlie')
    network.add_friendship('Charlie', 'David')
    network.add_friendship('David', 'Eve')
    network.add_friendship('Eve', 'Bob')
    
    # Finding friends
    print("Friends of Alice:", network.get_friends('Alice'))
    print("Friends of Bob:", network.get_friends('Bob'))
    
    # Finding common friends
    print("Common friends of Alice and Bob:", network.common_friends('Alice', 'Bob'))
    
    # Finding nth connection
    print("Connection between Alice and Janice:", network.nth_connection('Alice', 'Janice'))
    print("Connection between Alice and Bob:", network.nth_connection('Alice', 'Bob'))
    print("Connection between Alice and David:", network.nth_connection('Alice', 'David'))
    print("Connection between Alice and Eve:", network.nth_connection('Alice', 'Eve'))
    print("Connection between Alice and Nonexistent:", network.nth_connection('Alice', 'Nonexistent'))


--------------------------------------------------------------------------------------------------------------------------------------------------------------------
